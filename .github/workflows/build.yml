name: build

on:
  workflow_dispatch:
  push:
    branches: [main]
  repository_dispatch:
    branches: [main]
  
jobs:
  build:

    runs-on: ubuntu-latest
 
    steps:
    - name: Check out
      uses: actions/checkout@v3
      with:
        lfs: true
        fetch-depth: 0
        
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: 17
        cache: 'maven'
  
    - name: Configure servers
      uses: s4u/maven-settings-action@v2.7.0
      with:
        githubServer: false
        servers: |
          [{
              "id": "ossrh",
              "username": "${{ secrets.OSSRH_USERNAME }}",
              "password": "${{ secrets.OSSRH_PASSWORD }}"
           },{
              "id": "ghcr.io",
              "username": "${{ secrets.GHUB_USERNAME }}",
              "password": "${{ secrets.GHUB_ACCESS_TOKEN }}"
           },{
              "id": "github",
              "username": "${{ secrets.GHUB_USERNAME }}",
              "password": "${{ secrets.GHUB_ACCESS_TOKEN }}"
           }]
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Build with Maven (JUnit, JaCoCo, Sonar) 
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: mvn -B org.jacoco:jacoco-maven-plugin:prepare-agent package org.jacoco:jacoco-maven-plugin:report org.sonarsource.scanner.maven:sonar-maven-plugin:RELEASE:sonar -Dsonar.host.url=https://sonar.ftk.de -Dsonar.login=${SONAR_TOKEN} -P production
#    Deactivted. no need to deploy the server JAR to central
#    - name: Install GPG Code Signing Key
#      run: |
#        cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import
#        gpg --list-secret-keys --keyid-format LONG

#    - name: Deploy Maven artefacts
#      run: mvn -B --no-transfer-progress -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} -pl !sapl-server-ce -DskipTests -P publish,production,h2,mariadb clean deploy      #

    - name: Build SAPL Server CE Docker image
      run: mvn -B clean spring-boot:build-image -pl sapl-server-ce -P docker,production -DskipTests|| exit 1
#        mvn -B dockerfile:push -pl sapl-server-ce -P docker,production,mariadb,!h2 -DskipTests
                 
    - name: Clean up local repository before caching
      run: rm -rf /.m2/repository/io/sapl
